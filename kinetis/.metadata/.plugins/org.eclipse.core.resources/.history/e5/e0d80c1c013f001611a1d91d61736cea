/*
 * fsl_flexio_ws2812.c
 *
 *  Created on: 29.06.2016
 *      Author: mirko
 */

#include "fsl_flexio_ws2812.h"
#include "fsl_flexio.h"

static uint8_t flexio_ws2812_bufferindex = 0;
static uint8_t flexio_ws2812_bufferiindex = 0;
static uint32_t flexio_ws2812_buffer[FLEXIO_WS2812_BUFFER_SIZE] = {0};

void FLEXIO_WS2812_Init() {
	flexio_timer_config_t timerConfig;
	flexio_shifter_config_t shifterConfig;

	memset(&timerConfig, 0, sizeof(timerConfig));
	memset(&shifterConfig, 0, sizeof(shifterConfig));

	/* Timer for shifter load */
	timerConfig.triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_TIMn(5);
	timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveLow;
	timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
	timerConfig.pinConfig = kFLEXIO_PinConfigOutput;
	timerConfig.pinSelect = 10;
	timerConfig.pinPolarity = kFLEXIO_PinActiveLow;
	timerConfig.timerMode = kFLEXIO_TimerModeSingle16Bit;
	timerConfig.timerOutput = kFLEXIO_TimerOutputOneNotAffectedByReset;
	timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnTriggerInputShiftTriggerInput;
	timerConfig.timerReset = kFLEXIO_TimerResetNever;
	timerConfig.timerDisable = kFLEXIO_TimerDisableOnTimerCompare;
	timerConfig.timerEnable = kFLEXIO_TimerEnableOnTriggerRisingEdge;
	timerConfig.timerStop = kFLEXIO_TimerStopBitDisabled;
	timerConfig.timerStart = kFLEXIO_TimerStartBitDisabled;
	timerConfig.timerCompare = 62U;
	FLEXIO_SetTimerConfig(FLEXIO0, 4, &timerConfig);

	/* Timer for shift clock */
	timerConfig.triggerSelect = 0;
	timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveHigh;
	timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
	timerConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	timerConfig.pinSelect = 10;
	timerConfig.pinPolarity = kFLEXIO_PinActiveLow;
	timerConfig.timerMode = kFLEXIO_TimerModeSingle16Bit;
	timerConfig.timerOutput = kFLEXIO_TimerOutputZeroNotAffectedByReset;
	timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput;
	timerConfig.timerReset = kFLEXIO_TimerResetNever;
	timerConfig.timerDisable = kFLEXIO_TimerDisableNever;
	timerConfig.timerEnable = kFLEXIO_TimerEnabledAlways;
	timerConfig.timerStop = kFLEXIO_TimerStopBitDisabled;
	timerConfig.timerStart = kFLEXIO_TimerStartBitDisabled;
	timerConfig.timerCompare = 20U;
	FLEXIO_SetTimerConfig(FLEXIO0, 5, &timerConfig);

	/* Shifter for WS2812 data (350ns) */
	shifterConfig.timerSelect = 4;
	shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnNegitive;
	shifterConfig.pinConfig = kFLEXIO_PinConfigOutput;
	shifterConfig.pinSelect = 9;
	shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	shifterConfig.shifterMode = kFLEXIO_ShifterModeTransmit;
	shifterConfig.inputSource = kFLEXIO_ShifterInputFromPin;
	shifterConfig.shifterStop = kFLEXIO_ShifterStopBitDisable;
	shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnShift;
	FLEXIO_SetShifterConfig(FLEXIO0, 7, &shifterConfig);
}

void FLEXIO_WS2812_TransmitBuffer() {
	for(uint8_t i = 0; i < FLEXIO_WS2812_BUFFER_SIZE; i++) {
		/* Check if next 32bit can be transfered */
		while(!(FLEXIO_GetShifterStatusFlags(FLEXIO0) & (1 << 7)))
		{
			;
		}

		/* Transfer local buffer into shift buffer */
		FLEXIO0->SHIFTBUF[7] = flexio_ws2812_buffer[i];

		/* Clear buffer when send */
		flexio_ws2812_buffer[i] = 0U;
	}

	/* Clear index when all bits are send */
	flexio_ws2812_bufferindex = 0;
	flexio_ws2812_bufferiindex = 0;
}

void FLEXIO_WS2812_InsertBuffer(uint8_t value) {
	/* Check if bit is set */
	if(value) {
		/* Insert bit */
		flexio_ws2812_buffer[flexio_ws2812_bufferindex] |= 1 << flexio_ws2812_bufferiindex;
	}
	/* Increase index for bit position */
	flexio_ws2812_bufferiindex++;

	/* If 32bit reached switch to next 32bit buffer */
	if(flexio_ws2812_bufferiindex >= 32) {
		flexio_ws2812_bufferindex++;
		flexio_ws2812_bufferiindex = 0;
	}
}

void FLEXIO_WS2812_SendByte(uint8_t byte) {
	/* WS2812 byte coding, see WS2812 datasheet */
	for(uint8_t i = 0;  i < 8; i++) {
		if(byte & 1 << (7 - i)) {
			FLEXIO_WS2812_InsertBuffer(1);
			FLEXIO_WS2812_InsertBuffer(1);
			FLEXIO_WS2812_InsertBuffer(0);
			FLEXIO_WS2812_InsertBuffer(0);
		} else {
			FLEXIO_WS2812_InsertBuffer(1);
			FLEXIO_WS2812_InsertBuffer(0);
			FLEXIO_WS2812_InsertBuffer(0);
		}
	}
}

void FLEXIO_WS2812_Update(const struct FLEXIO_WS2812_LED *led) {
	FLEXIO_WS2812_SendByte(led->g);
	FLEXIO_WS2812_SendByte(led->r);
	FLEXIO_WS2812_SendByte(led->b);
}
