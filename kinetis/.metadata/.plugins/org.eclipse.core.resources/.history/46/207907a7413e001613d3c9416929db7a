/*
 * fsl_flexio_hcsr04.c
 *
 *  Created on: 29.06.2016
 *      Author: mirko
 */

void FLEXIO_HCSRInit(uint8_t echo) {
	  flexio_timer_config_t timerConfig;
	  flexio_shifter_config_t shifterConfig;

	  memset(&timerConfig, 0, sizeof(timerConfig));
	  memset(&shifterConfig, 0, sizeof(shifterConfig));

	  timerConfig.triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_TIMn(3);
	  timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveHigh;
	  timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
	  timerConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  timerConfig.pinSelect = 2;
	  timerConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  timerConfig.timerMode = kFLEXIO_TimerModeSingle16Bit;
	  timerConfig.timerOutput = kFLEXIO_TimerOutputZeroNotAffectedByReset;
	  timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnTriggerInputShiftTriggerInput;
	  timerConfig.timerReset = kFLEXIO_TimerResetNever;
	  timerConfig.timerDisable = kFLEXIO_TimerDisableOnTimerCompareTriggerLow;
	  timerConfig.timerEnable = kFLEXIO_TimerEnableOnTriggerRisingEdge;
	  timerConfig.timerStop = kFLEXIO_TimerStopBitDisabled;
	  timerConfig.timerStart = kFLEXIO_TimerStartBitDisabled;
	  timerConfig.timerCompare = 256U;
	  FLEXIO_SetTimerConfig(FLEXIO0, 2, &timerConfig);

	  timerConfig.triggerSelect = FLEXIO_TIMER_TRIGGER_SEL_PININPUT(echo);
	  timerConfig.triggerPolarity = kFLEXIO_TimerTriggerPolarityActiveHigh;
	  timerConfig.triggerSource = kFLEXIO_TimerTriggerSourceInternal;
	  timerConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  timerConfig.pinSelect = 2;
	  timerConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  timerConfig.timerMode = kFLEXIO_TimerModeSingle16Bit;
	  timerConfig.timerOutput = kFLEXIO_TimerOutputZeroNotAffectedByReset;
	  timerConfig.timerDecrement = kFLEXIO_TimerDecSrcOnFlexIOClockShiftTimerOutput;
	  timerConfig.timerReset = kFLEXIO_TimerResetOnTimerTriggerRisingEdge;
	  timerConfig.timerDisable = kFLEXIO_TimerDisableOnPreTimerDisable;
	  timerConfig.timerEnable = kFLEXIO_TimerEnableOnTriggerRisingEdge;
	  timerConfig.timerStop = kFLEXIO_TimerStopBitDisabled;
	  timerConfig.timerStart = kFLEXIO_TimerStartBitDisabled;
//	  timerConfig.timerCompare = 3480U;
	  timerConfig.timerCompare = 6960U;
	  FLEXIO_SetTimerConfig(FLEXIO0, 3, &timerConfig);

	  shifterConfig.timerSelect = 2;
	  shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive;
	  shifterConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  shifterConfig.pinSelect = 1;
	  shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  shifterConfig.shifterMode = kFLEXIO_ShifterModeReceive;
	  shifterConfig.inputSource = kFLEXIO_ShifterInputFromNextShifterOutput;
	  shifterConfig.shifterStop = kFLEXIO_ShifterStopBitDisable;
	  shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable;
	  FLEXIO_SetShifterConfig(FLEXIO0, 0, &shifterConfig);

	  shifterConfig.timerSelect = 2;
	  shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive;
	  shifterConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  shifterConfig.pinSelect = 1;
	  shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  shifterConfig.shifterMode = kFLEXIO_ShifterModeReceive;
	  shifterConfig.inputSource = kFLEXIO_ShifterInputFromNextShifterOutput;
	  shifterConfig.shifterStop = kFLEXIO_ShifterStopBitDisable;
	  shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable;
	  FLEXIO_SetShifterConfig(FLEXIO0, 1, &shifterConfig);

	  shifterConfig.timerSelect = 2;
	  shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive;
	  shifterConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  shifterConfig.pinSelect = 1;
	  shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  shifterConfig.shifterMode = kFLEXIO_ShifterModeReceive;
	  shifterConfig.inputSource = kFLEXIO_ShifterInputFromNextShifterOutput;
	  shifterConfig.shifterStop = kFLEXIO_ShifterStopBitDisable;
	  shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable;
	  FLEXIO_SetShifterConfig(FLEXIO0, 2, &shifterConfig);

	  shifterConfig.timerSelect = 2;
	  shifterConfig.timerPolarity = kFLEXIO_ShifterTimerPolarityOnPositive;
	  shifterConfig.pinConfig = kFLEXIO_PinConfigOutputDisabled;
	  shifterConfig.pinSelect = echo;
	  shifterConfig.pinPolarity = kFLEXIO_PinActiveHigh;
	  shifterConfig.shifterMode = kFLEXIO_ShifterModeReceive;
	  shifterConfig.inputSource = kFLEXIO_ShifterInputFromPin;
	  shifterConfig.shifterStop = kFLEXIO_ShifterStopBitDisable;
	  shifterConfig.shifterStart = kFLEXIO_ShifterStartBitDisabledLoadDataOnEnable;
	  FLEXIO_SetShifterConfig(FLEXIO0, 3, &shifterConfig);

}

uint16_t HCSR_Ping(uint8_t echo, GPIO_Type *base, uint32_t pin) {
	volatile uint16_t i = 0;
	HCSR_Init(echo);
	GPIO_WritePinOutput(base, pin, 1U);
	while(i < 200) {
		i++;
	}
	i = 0;
	GPIO_WritePinOutput(base, pin, 0U);
	while((FLEXIO_GetShifterStatusFlags(FLEXIO0) & 15) != 15) {
		;
	}
	return (__builtin_popcount(FLEXIO0->SHIFTBUF[0]) + __builtin_popcount(FLEXIO0->SHIFTBUF[1]) + __builtin_popcount(FLEXIO0->SHIFTBUF[2]) + __builtin_popcount(FLEXIO0->SHIFTBUF[3])) * 2;
}

void cm() {
	uint16_t range[8] = {0};
	range[0] = HCSR_Ping(0, GPIOA, 5);	// 0
	range[1] = HCSR_Ping(2, GPIOA, 13);	// 45
	range[2] = HCSR_Ping(3, GPIOA, 12);	// 90
	range[3] = HCSR_Ping(4, GPIOA, 17);	// 135
	range[4] = HCSR_Ping(5, GPIOA, 14);	// 180
	range[5] = HCSR_Ping(6, GPIOC, 7);	// 225
	range[6] = HCSR_Ping(7, GPIOA, 16);	// 270
	range[7] = HCSR_Ping(8, GPIOA, 15);	// 315
	PRINTF("%d,%d,%d,%d,%d,%d,%d,%d\r\n", range[0], range[1], range[2], range[3], range[4], range[5], range[6], range[7]);
}


